(()=>{"use strict";var e={d:(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{add:()=>f,angle:()=>O,bezier:()=>R,ceil:()=>y,clone:()=>i,copy:()=>u,create:()=>o,cross:()=>L,dist:()=>X,distance:()=>M,div:()=>Q,divide:()=>d,dot:()=>F,equals:()=>z,exactEquals:()=>K,floor:()=>m,forEach:()=>$,fromValues:()=>l,hermite:()=>B,inverse:()=>P,len:()=>J,length:()=>s,lerp:()=>j,max:()=>g,min:()=>v,mul:()=>Y,multiply:()=>p,negate:()=>A,normalize:()=>E,random:()=>k,rotateX:()=>I,rotateY:()=>U,rotateZ:()=>C,round:()=>b,scale:()=>w,scaleAndAdd:()=>x,set:()=>c,sqrDist:()=>W,sqrLen:()=>Z,squaredDistance:()=>T,squaredLength:()=>S,str:()=>q,sub:()=>H,subtract:()=>h,transformMat3:()=>_,transformMat4:()=>D,transformQuat:()=>V,zero:()=>N});var t=1e-6,n="undefined"!=typeof Float32Array?Float32Array:Array,a=Math.random;function o(){var e=new n(3);return n!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function i(e){var r=new n(3);return r[0]=e[0],r[1]=e[1],r[2]=e[2],r}function s(e){var r=e[0],t=e[1],n=e[2];return Math.hypot(r,t,n)}function l(e,r,t){var a=new n(3);return a[0]=e,a[1]=r,a[2]=t,a}function u(e,r){return e[0]=r[0],e[1]=r[1],e[2]=r[2],e}function c(e,r,t,n){return e[0]=r,e[1]=t,e[2]=n,e}function f(e,r,t){return e[0]=r[0]+t[0],e[1]=r[1]+t[1],e[2]=r[2]+t[2],e}function h(e,r,t){return e[0]=r[0]-t[0],e[1]=r[1]-t[1],e[2]=r[2]-t[2],e}function p(e,r,t){return e[0]=r[0]*t[0],e[1]=r[1]*t[1],e[2]=r[2]*t[2],e}function d(e,r,t){return e[0]=r[0]/t[0],e[1]=r[1]/t[1],e[2]=r[2]/t[2],e}function y(e,r){return e[0]=Math.ceil(r[0]),e[1]=Math.ceil(r[1]),e[2]=Math.ceil(r[2]),e}function m(e,r){return e[0]=Math.floor(r[0]),e[1]=Math.floor(r[1]),e[2]=Math.floor(r[2]),e}function v(e,r,t){return e[0]=Math.min(r[0],t[0]),e[1]=Math.min(r[1],t[1]),e[2]=Math.min(r[2],t[2]),e}function g(e,r,t){return e[0]=Math.max(r[0],t[0]),e[1]=Math.max(r[1],t[1]),e[2]=Math.max(r[2],t[2]),e}function b(e,r){return e[0]=Math.round(r[0]),e[1]=Math.round(r[1]),e[2]=Math.round(r[2]),e}function w(e,r,t){return e[0]=r[0]*t,e[1]=r[1]*t,e[2]=r[2]*t,e}function x(e,r,t,n){return e[0]=r[0]+t[0]*n,e[1]=r[1]+t[1]*n,e[2]=r[2]+t[2]*n,e}function M(e,r){var t=r[0]-e[0],n=r[1]-e[1],a=r[2]-e[2];return Math.hypot(t,n,a)}function T(e,r){var t=r[0]-e[0],n=r[1]-e[1],a=r[2]-e[2];return t*t+n*n+a*a}function S(e){var r=e[0],t=e[1],n=e[2];return r*r+t*t+n*n}function A(e,r){return e[0]=-r[0],e[1]=-r[1],e[2]=-r[2],e}function P(e,r){return e[0]=1/r[0],e[1]=1/r[1],e[2]=1/r[2],e}function E(e,r){var t=r[0],n=r[1],a=r[2],o=t*t+n*n+a*a;return o>0&&(o=1/Math.sqrt(o)),e[0]=r[0]*o,e[1]=r[1]*o,e[2]=r[2]*o,e}function F(e,r){return e[0]*r[0]+e[1]*r[1]+e[2]*r[2]}function L(e,r,t){var n=r[0],a=r[1],o=r[2],i=t[0],s=t[1],l=t[2];return e[0]=a*l-o*s,e[1]=o*i-n*l,e[2]=n*s-a*i,e}function j(e,r,t,n){var a=r[0],o=r[1],i=r[2];return e[0]=a+n*(t[0]-a),e[1]=o+n*(t[1]-o),e[2]=i+n*(t[2]-i),e}function B(e,r,t,n,a,o){var i=o*o,s=i*(2*o-3)+1,l=i*(o-2)+o,u=i*(o-1),c=i*(3-2*o);return e[0]=r[0]*s+t[0]*l+n[0]*u+a[0]*c,e[1]=r[1]*s+t[1]*l+n[1]*u+a[1]*c,e[2]=r[2]*s+t[2]*l+n[2]*u+a[2]*c,e}function R(e,r,t,n,a,o){var i=1-o,s=i*i,l=o*o,u=s*i,c=3*o*s,f=3*l*i,h=l*o;return e[0]=r[0]*u+t[0]*c+n[0]*f+a[0]*h,e[1]=r[1]*u+t[1]*c+n[1]*f+a[1]*h,e[2]=r[2]*u+t[2]*c+n[2]*f+a[2]*h,e}function k(e,r){r=r||1;var t=2*a()*Math.PI,n=2*a()-1,o=Math.sqrt(1-n*n)*r;return e[0]=Math.cos(t)*o,e[1]=Math.sin(t)*o,e[2]=n*r,e}function D(e,r,t){var n=r[0],a=r[1],o=r[2],i=t[3]*n+t[7]*a+t[11]*o+t[15];return i=i||1,e[0]=(t[0]*n+t[4]*a+t[8]*o+t[12])/i,e[1]=(t[1]*n+t[5]*a+t[9]*o+t[13])/i,e[2]=(t[2]*n+t[6]*a+t[10]*o+t[14])/i,e}function _(e,r,t){var n=r[0],a=r[1],o=r[2];return e[0]=n*t[0]+a*t[3]+o*t[6],e[1]=n*t[1]+a*t[4]+o*t[7],e[2]=n*t[2]+a*t[5]+o*t[8],e}function V(e,r,t){var n=t[0],a=t[1],o=t[2],i=t[3],s=r[0],l=r[1],u=r[2],c=a*u-o*l,f=o*s-n*u,h=n*l-a*s,p=a*h-o*f,d=o*c-n*h,y=n*f-a*c,m=2*i;return c*=m,f*=m,h*=m,p*=2,d*=2,y*=2,e[0]=s+c+p,e[1]=l+f+d,e[2]=u+h+y,e}function I(e,r,t,n){var a=[],o=[];return a[0]=r[0]-t[0],a[1]=r[1]-t[1],a[2]=r[2]-t[2],o[0]=a[0],o[1]=a[1]*Math.cos(n)-a[2]*Math.sin(n),o[2]=a[1]*Math.sin(n)+a[2]*Math.cos(n),e[0]=o[0]+t[0],e[1]=o[1]+t[1],e[2]=o[2]+t[2],e}function U(e,r,t,n){var a=[],o=[];return a[0]=r[0]-t[0],a[1]=r[1]-t[1],a[2]=r[2]-t[2],o[0]=a[2]*Math.sin(n)+a[0]*Math.cos(n),o[1]=a[1],o[2]=a[2]*Math.cos(n)-a[0]*Math.sin(n),e[0]=o[0]+t[0],e[1]=o[1]+t[1],e[2]=o[2]+t[2],e}function C(e,r,t,n){var a=[],o=[];return a[0]=r[0]-t[0],a[1]=r[1]-t[1],a[2]=r[2]-t[2],o[0]=a[0]*Math.cos(n)-a[1]*Math.sin(n),o[1]=a[0]*Math.sin(n)+a[1]*Math.cos(n),o[2]=a[2],e[0]=o[0]+t[0],e[1]=o[1]+t[1],e[2]=o[2]+t[2],e}function O(e,r){var t=e[0],n=e[1],a=e[2],o=r[0],i=r[1],s=r[2],l=Math.sqrt(t*t+n*n+a*a)*Math.sqrt(o*o+i*i+s*s),u=l&&F(e,r)/l;return Math.acos(Math.min(Math.max(u,-1),1))}function N(e){return e[0]=0,e[1]=0,e[2]=0,e}function q(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"}function K(e,r){return e[0]===r[0]&&e[1]===r[1]&&e[2]===r[2]}function z(e,r){var n=e[0],a=e[1],o=e[2],i=r[0],s=r[1],l=r[2];return Math.abs(n-i)<=t*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(a-s)<=t*Math.max(1,Math.abs(a),Math.abs(s))&&Math.abs(o-l)<=t*Math.max(1,Math.abs(o),Math.abs(l))}Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,r=arguments.length;r--;)e+=arguments[r]*arguments[r];return Math.sqrt(e)});var G,H=h,Y=p,Q=d,X=M,W=T,J=s,Z=S,$=(G=o(),function(e,r,t,n,a,o){var i,s;for(r||(r=3),t||(t=0),s=n?Math.min(n*r+t,e.length):e.length,i=t;i<s;i+=r)G[0]=e[i],G[1]=e[i+1],G[2]=e[i+2],a(G,G,o),e[i]=G[0],e[i+1]=G[1],e[i+2]=G[2];return e});function ee(){var e=new n(16);return n!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function re(e,r,t){var n=r[0],a=r[1],o=r[2],i=r[3],s=r[4],l=r[5],u=r[6],c=r[7],f=r[8],h=r[9],p=r[10],d=r[11],y=r[12],m=r[13],v=r[14],g=r[15],b=t[0],w=t[1],x=t[2],M=t[3];return e[0]=b*n+w*s+x*f+M*y,e[1]=b*a+w*l+x*h+M*m,e[2]=b*o+w*u+x*p+M*v,e[3]=b*i+w*c+x*d+M*g,b=t[4],w=t[5],x=t[6],M=t[7],e[4]=b*n+w*s+x*f+M*y,e[5]=b*a+w*l+x*h+M*m,e[6]=b*o+w*u+x*p+M*v,e[7]=b*i+w*c+x*d+M*g,b=t[8],w=t[9],x=t[10],M=t[11],e[8]=b*n+w*s+x*f+M*y,e[9]=b*a+w*l+x*h+M*m,e[10]=b*o+w*u+x*p+M*v,e[11]=b*i+w*c+x*d+M*g,b=t[12],w=t[13],x=t[14],M=t[15],e[12]=b*n+w*s+x*f+M*y,e[13]=b*a+w*l+x*h+M*m,e[14]=b*o+w*u+x*p+M*v,e[15]=b*i+w*c+x*d+M*g,e}function te(e,r,n,a){var o,i,s,l,u,c,f,h,p,d,y,m,v,g,b,w,x,M,T,S,A,P,E,F,L=a[0],j=a[1],B=a[2],R=Math.hypot(L,j,B);return R<t?null:(L*=R=1/R,j*=R,B*=R,o=Math.sin(n),s=1-(i=Math.cos(n)),l=r[0],u=r[1],c=r[2],f=r[3],h=r[4],p=r[5],d=r[6],y=r[7],m=r[8],v=r[9],g=r[10],b=r[11],w=L*L*s+i,x=j*L*s+B*o,M=B*L*s-j*o,T=L*j*s-B*o,S=j*j*s+i,A=B*j*s+L*o,P=L*B*s+j*o,E=j*B*s-L*o,F=B*B*s+i,e[0]=l*w+h*x+m*M,e[1]=u*w+p*x+v*M,e[2]=c*w+d*x+g*M,e[3]=f*w+y*x+b*M,e[4]=l*T+h*S+m*A,e[5]=u*T+p*S+v*A,e[6]=c*T+d*S+g*A,e[7]=f*T+y*S+b*A,e[8]=l*P+h*E+m*F,e[9]=u*P+p*E+v*F,e[10]=c*P+d*E+g*F,e[11]=f*P+y*E+b*F,r!==e&&(e[12]=r[12],e[13]=r[13],e[14]=r[14],e[15]=r[15]),e)}function ne(e,r,n){var a,o,i,s=n[0],l=n[1],u=n[2],c=Math.hypot(s,l,u);return c<t?null:(s*=c=1/c,l*=c,u*=c,a=Math.sin(r),i=1-(o=Math.cos(r)),e[0]=s*s*i+o,e[1]=l*s*i+u*a,e[2]=u*s*i-l*a,e[3]=0,e[4]=s*l*i-u*a,e[5]=l*l*i+o,e[6]=u*l*i+s*a,e[7]=0,e[8]=s*u*i+l*a,e[9]=l*u*i-s*a,e[10]=u*u*i+o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)}function ae(e,r){var t=r[0],n=r[1],a=r[2],o=r[3],i=t+t,s=n+n,l=a+a,u=t*i,c=n*i,f=n*s,h=a*i,p=a*s,d=a*l,y=o*i,m=o*s,v=o*l;return e[0]=1-f-d,e[1]=c+v,e[2]=h-m,e[3]=0,e[4]=c-v,e[5]=1-u-d,e[6]=p+y,e[7]=0,e[8]=h+m,e[9]=p-y,e[10]=1-u-f,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}var oe=function(e,r,t,n,a){var o,i=1/Math.tan(r/2);return e[0]=i/t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=a&&a!==1/0?(o=1/(n-a),e[10]=(a+n)*o,e[14]=2*a*n*o):(e[10]=-1,e[14]=-2*n),e};function ie(e,r,n,a){var o,i,s,l,u,c,f,h,p,d,y=r[0],m=r[1],v=r[2],g=a[0],b=a[1],w=a[2],x=n[0],M=n[1],T=n[2];return Math.abs(y-x)<t&&Math.abs(m-M)<t&&Math.abs(v-T)<t?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(f=y-x,h=m-M,p=v-T,o=b*(p*=d=1/Math.hypot(f,h,p))-w*(h*=d),i=w*(f*=d)-g*p,s=g*h-b*f,(d=Math.hypot(o,i,s))?(o*=d=1/d,i*=d,s*=d):(o=0,i=0,s=0),l=h*s-p*i,u=p*o-f*s,c=f*i-h*o,(d=Math.hypot(l,u,c))?(l*=d=1/d,u*=d,c*=d):(l=0,u=0,c=0),e[0]=o,e[1]=l,e[2]=f,e[3]=0,e[4]=i,e[5]=u,e[6]=h,e[7]=0,e[8]=s,e[9]=c,e[10]=p,e[11]=0,e[12]=-(o*y+i*m+s*v),e[13]=-(l*y+u*m+c*v),e[14]=-(f*y+h*m+p*v),e[15]=1,e)}function se(){var e=new n(4);return n!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}function le(e,r,t){t*=.5;var n=Math.sin(t);return e[0]=n*r[0],e[1]=n*r[1],e[2]=n*r[2],e[3]=Math.cos(t),e}function ue(e,r,t){var n=r[0],a=r[1],o=r[2],i=r[3],s=t[0],l=t[1],u=t[2],c=t[3];return e[0]=n*c+i*s+a*u-o*l,e[1]=a*c+i*l+o*s-n*u,e[2]=o*c+i*u+n*l-a*s,e[3]=i*c-n*s-a*l-o*u,e}!function(){var e;e=new n(4),n!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0)}();var ce,fe=function(e){var r=new n(4);return r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r},he=(o(),l(1,0,0),l(0,1,0),se(),se(),ce=new n(9),n!=Float32Array&&(ce[1]=0,ce[2]=0,ce[3]=0,ce[5]=0,ce[6]=0,ce[7]=0),ce[0]=1,ce[4]=1,ce[8]=1,ce,function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}),pe=function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,a,o=t.call(e),i=[];try{for(;(void 0===r||r-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},de=function(e,r,t){if(t||2===arguments.length)for(var n,a=0,o=r.length;a<o;a++)!n&&a in r||(n||(n=Array.prototype.slice.call(r,0,a)),n[a]=r[a]);return e.concat(n||Array.prototype.slice.call(r))};function ye(e,r,t){return[e/255,r/255,t/255]}function me(e){var r,t,n,a,i=o();try{for(var s=he(e.vertices),l=s.next();!l.done;l=s.next())f(i,i,p=l.value)}catch(e){r={error:e}}finally{try{l&&!l.done&&(t=s.return)&&t.call(s)}finally{if(r)throw r.error}}w(i,i,1/e.vertices.length);try{for(var u=he(e.vertices),c=u.next();!c.done;c=u.next()){var p;h(p=c.value,p,i)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=u.return)&&a.call(u)}finally{if(n)throw n.error}}return e}function ve(e,r){return me({material:r,vertices:[[0,0,0],[e,0,0],[e,0,e],[0,0,e],[0,e,0],[e,e,0],[e,e,e],[0,e,e]],triangles:[[0,1,2],[2,3,0],[4,5,6],[6,7,4],[0,1,4],[4,5,1],[1,2,5],[2,5,6],[2,3,6],[3,6,7],[3,0,7],[0,7,4]]})}var ge=ye(252,229,112),be=ye(29,17,53),we=ve(2,{ambient:ge,diffuse:[0,0,0],specular:[0,0,0],n:11}),xe=ve(.1,{ambient:[1,1,1],diffuse:[0,0,0],specular:[0,0,0],n:11}),Me=me({material:{ambient:[.125,.125,.125],diffuse:[.325,.325,.325],specular:[.45,.45,.45],n:31},vertices:[[0,0,0],[.3,.6,0],[.6,0,0],[.3,.15,.08],[.3,.15,-.08]],triangles:[[0,1,3],[0,1,4],[0,3,4],[2,1,3],[2,1,4],[2,3,4]]}),Te=Me.vertices[1],Se=Me.vertices.map((function(e){return l.apply(r,de([],pe(e),!1))})),Ae={material:{ambient:ye(226,88,34),diffuse:[0,0,0],specular:[0,0,0],n:17},vertices:[[5/32,0,0],[0,0,5/128],[-5/32,0,0],[0,0,-5/128],[0,-.4,0]],triangles:[[0,1,2],[2,3,0],[0,1,4],[1,2,4],[2,3,4],[3,0,4]]},Pe={material:{ambient:ye(255,247,110),diffuse:[0,0,0],specular:[0,0,0],n:17},vertices:[[4.5/32,0,0],[0,0,6/128],[-4.5/32,0,0],[0,0,-6/128],[0,-.36,0]],triangles:[[0,1,2],[2,3,0],[0,1,4],[1,2,4],[2,3,4],[3,0,4]]},Ee=function(e,r){for(var t in e.vertices)e.vertices[t][0]+=r[0],e.vertices[t][1]+=r[1],e.vertices[t][2]+=r[2];return e}(ve(.1,{ambient:ye(255,255,255),diffuse:[0,0,0],specular:[0,0,0],n:11}),[0,10,0]),Fe=me({material:{ambient:[1,.2,.2],diffuse:[0,0,0],specular:[0,0,0],n:11},vertices:[[1/32,0,0],[0,0,1/32],[-1/32,0,0],[0,0,-1/32],[1/32,.5,0],[0,.5,1/32],[-1/32,.5,0],[0,.5,-1/32]],triangles:[[0,1,2],[2,3,0],[4,5,6],[6,7,4],[0,1,4],[4,5,1],[1,2,5],[2,5,6],[2,3,6],[3,6,7],[3,0,7],[0,7,4]]}),Le=ye(99,78,63),je=[1,0,0],Be={ambient:Le.map((function(e){return.5*e})),diffuse:Le.map((function(e){return 1*e})),specular:[0,0,0],n:11};var Re=function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,a,o=t.call(e),i=[];try{for(;(void 0===r||r-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},ke=function(e,r,t){if(t||2===arguments.length)for(var n,a=0,o=r.length;a<o;a++)!n&&a in r||(n||(n=Array.prototype.slice.call(r,0,a)),n[a]=r[a]);return e.concat(n||Array.prototype.slice.call(r))},De=function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},_e=be,Ve=function(){function e(e,r,t){void 0===t&&(t=ee());var n=r.vertices.flat(),a=e.createBuffer();if(null==a)throw"could not create webgl buffer";e.bindBuffer(e.ARRAY_BUFFER,a),e.bufferData(e.ARRAY_BUFFER,new Float32Array(n),e.STATIC_DRAW);var o=r.triangles.flat(),i=e.createBuffer();if(null==i)throw"could not create webgl buffer";e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,i),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(o),e.STATIC_DRAW),this.vertexPosBuffer=a,this.triangleBuffer=i,this.triangleBufferSize=o.length,this.model=r,this.vertexTransform=t}return e.prototype.translate=function(e){re(this.vertexTransform,function(e,r){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}(ee(),e),this.vertexTransform)},e.prototype.rotate=function(e){!function(e,r,t){var n=Math.sin(t),a=Math.cos(t),o=r[0],i=r[1],s=r[2],l=r[3],u=r[4],c=r[5],f=r[6],h=r[7];r!==e&&(e[8]=r[8],e[9]=r[9],e[10]=r[10],e[11]=r[11],e[12]=r[12],e[13]=r[13],e[14]=r[14],e[15]=r[15]),e[0]=o*a+u*n,e[1]=i*a+c*n,e[2]=s*a+f*n,e[3]=l*a+h*n,e[4]=u*a-o*n,e[5]=c*a-i*n,e[6]=f*a-s*n,e[7]=h*a-l*n}(this.vertexTransform,this.vertexTransform,e)},e.prototype.pos=function(){return function(e,r){return e[0]=r[12],e[1]=r[13],e[2]=r[14],e}(o(),this.vertexTransform)},e}(),Ie=["aVertexPos"],Ue=["uViewingTransform","uPerspectiveTransform","uVertexTransform","uLights","uNumLights","uEyePos","uFog","uMaterial.ambient","uMaterial.diffuse","uMaterial.specular","uMaterial.shine"];function Ce(e){var r,t,n,a;e.getExtension("OES_standard_derivatives");var o=e.createShader(e.VERTEX_SHADER);if(null==o)throw"could not create webgl shader";if(e.shaderSource(o,"\nprecision highp float;\n\nuniform mat4 uViewingTransform;\nuniform mat4 uPerspectiveTransform;\n\nuniform mat4 uVertexTransform;\n\nattribute vec3 aVertexPos;\nvarying vec4 vSurfacePos;\n\nvoid main(void) {\n  vSurfacePos = uVertexTransform * vec4(aVertexPos, 1.0);\n\n  gl_Position = uPerspectiveTransform * uViewingTransform * vSurfacePos;\n}\n"),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw"error during vertex shader compile: "+e.getShaderInfoLog(o);var i="\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\n\nconst int NUM_SUNS = ".concat(4,";\nconst float FOG_START = ").concat(24..toFixed(10),";\nconst float FOG_END = ").concat(32..toFixed(10),";\nconst vec3 FOG_COLOR = vec3(").concat(_e[0],", ").concat(_e[1],", ").concat(_e[2],");\n\nuniform vec3 uLights[NUM_SUNS];\nuniform int uNumLights;\nuniform vec3 uEyePos;\nuniform int uFog;\n\nstruct Material {\n  vec3 ambient;\n  vec3 diffuse;\n  vec3 specular;\n  float shine;\n};\n\nuniform Material uMaterial;\n\nvarying vec4 vSurfacePos;\n\n// The function 1 / (1 + 0.002x^3) == 0.5 at 7.937\nfloat attenuation(float x) {\n  if (x < 8.0) {\n    return 1.0;\n  } else {\n    x -= 8.0;\n    float a = 1.0 / (1.0 + 0.05*x + 0.004*x*x*x);\n    return clamp(a, 0.0, 1.0);\n  }\n}\n\nvoid main(void) {\n  vec3 color = uMaterial.ambient;\n\n  vec3 viewVector = normalize(uEyePos - vSurfacePos.xyz);\n  vec3 normalVector = normalize(cross(\n    dFdx(vSurfacePos.xyz),\n    dFdy(vSurfacePos.xyz)\n  ));\n\n  for (int i = 0; i < NUM_SUNS; i++) {\n    if (i >= uNumLights) {\n      break;\n    }\n\n    vec3 lightVector = normalize(uLights[i] - vSurfacePos.xyz);\n    vec3 halfVector = normalize(viewVector + lightVector);\n\n    float lightDist = length(uLights[i] - vSurfacePos.xyz);\n    float atten = attenuation(lightDist);\n\n    vec3 diffuse = atten * uMaterial.diffuse * max(0.0, dot(normalVector, lightVector));\n    vec3 specular = atten * uMaterial.specular * pow(max(0.0, dot(normalVector, halfVector)), uMaterial.shine);\n    color += diffuse + specular;\n  }\n\n  float fogFactor = 0.0;\n  if (uFog == 1) {\n    float dist = length(uEyePos - vSurfacePos.xyz);\n    fogFactor = min(1.0, max(0.0, dist - FOG_START) / (FOG_END - FOG_START));\n  }\n\n  gl_FragColor = vec4(mix(color, FOG_COLOR, fogFactor), 1.0);\n}\n"),s=e.createShader(e.FRAGMENT_SHADER);if(null==s)throw"could not create webgl shader";if(e.shaderSource(s,i),e.compileShader(s),!e.getShaderParameter(s,e.COMPILE_STATUS))throw"error during fragment shader compile: "+e.getShaderInfoLog(s);var l=e.createProgram();if(null==l)throw"could not create webgl program";if(e.attachShader(l,s),e.attachShader(l,o),e.linkProgram(l),!e.getProgramParameter(l,e.LINK_STATUS))throw"error during shader program linking: "+e.getProgramInfoLog(l);e.useProgram(l);var u={attribs:{},uniforms:{}};try{for(var c=De(Ie),f=c.next();!f.done;f=c.next()){var h=f.value,p=e.getAttribLocation(l,h);if(-1==p)throw"invalid attribute ".concat(h);e.enableVertexAttribArray(p),u.attribs[h]=p}}catch(e){r={error:e}}finally{try{f&&!f.done&&(t=c.return)&&t.call(c)}finally{if(r)throw r.error}}try{for(var d=De(Ue),y=d.next();!y.done;y=d.next()){var m=y.value,v=e.getUniformLocation(l,m);u.uniforms[m]=v}}catch(e){n={error:e}}finally{try{y&&!y.done&&(a=d.return)&&a.call(d)}finally{if(n)throw n.error}}return u}function Oe(e,r,t,n,a,o,i){var s,l,u,c;null==i&&(i={fog:!0}),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT);var f=[],h=0;try{for(var p=De(r),d=p.next();!d.done;d=p.next()){var y=d.value;f.push.apply(f,ke([],Re(y),!1)),h+=1}}catch(e){s={error:e}}finally{try{d&&!d.done&&(l=p.return)&&l.call(p)}finally{if(s)throw s.error}}function m(r){var t,n;t=r.vertexPosBuffer,n=a.attribs.aVertexPos,e.bindBuffer(e.ARRAY_BUFFER,t),e.vertexAttribPointer(n,3,e.FLOAT,!1,0,0),e.uniformMatrix4fv(a.uniforms.uVertexTransform,!1,r.vertexTransform);var o=r.model.material;e.uniform3fv(a.uniforms["uMaterial.ambient"],o.ambient),e.uniform3fv(a.uniforms["uMaterial.diffuse"],o.diffuse),e.uniform3fv(a.uniforms["uMaterial.specular"],o.specular),e.uniform1f(a.uniforms["uMaterial.shine"],o.n),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r.triangleBuffer),e.drawElements(e.TRIANGLES,r.triangleBufferSize,e.UNSIGNED_SHORT,0)}e.uniform3fv(a.uniforms.uLights,f),e.uniform1i(a.uniforms.uNumLights,h),e.uniform1i(a.uniforms.uFog,i.fog?1:0),e.uniform3fv(a.uniforms.uEyePos,o.eye),e.uniformMatrix4fv(a.uniforms.uViewingTransform,!1,o.viewingTransform),e.uniformMatrix4fv(a.uniforms.uPerspectiveTransform,!1,o.perspectiveTransform),e.enable(e.DEPTH_TEST);var v=Array.from(t);try{for(var g=De(v),b=g.next();!b.done;b=g.next())m(b.value)}catch(e){u={error:e}}finally{try{b&&!b.done&&(c=g.return)&&c.call(g)}finally{if(u)throw u.error}}e.disable(e.DEPTH_TEST),Array.from(n).forEach(m)}var Ne=function(){function e(e,r){this.getTime=e,this.debounceTime=r,this.lastChange=-r}return e.prototype.reset=function(){this.lastChange=-this.debounceTime},e.prototype.set=function(){this.lastChange=this.getTime()},e.prototype.ready=function(){return this.getTime()-this.lastChange>=this.debounceTime},e.prototype.try=function(e){var r=this.getTime();r-this.lastChange>=this.debounceTime&&(e(),this.lastChange=r)},e}(),qe=function(){function e(){this.pressed=new Set}return e.prototype.register=function(){var e=this;document.addEventListener("keydown",(function(r){e.pressed.add(r.code)})),document.addEventListener("keyup",(function(r){e.pressed.delete(r.code)}))},e}(),Ke=function(e,r){var t,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=r.call(e,i)}catch(e){o=[6,e],n=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},ze=function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,a,o=t.call(e),i=[];try{for(;(void 0===r||r-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},Ge=function(e,r,t){if(t||2===arguments.length)for(var n,a=0,o=r.length;a<o;a++)!n&&a in r||(n||(n=Array.prototype.slice.call(r,0,a)),n[a]=r[a]);return e.concat(n||Array.prototype.slice.call(r))},He=function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};function Ye(e,r){return(r-e)*Math.random()+e}function Qe(e,r){return Math.min(r[1],Math.max(r[0],e))}function Xe(e){return e*(Math.PI/180)}function We(e,r){return Je(e,[0,r])}function Je(e,r){var t=l(e[0]+1,e[1],e[2]);Math.abs(t[0])<.01&&(t=l(e[0],e[1]+1,e[2])),L(t,e,t),E(t,t);var n=u(o(),e),a=ne(ee(),Ye.apply(void 0,Ge([],ze(r),!1)),t),i=ne(ee(),Ye(0,2*Math.PI),e);return D(n,n,a),D(n,n,i),n}var Ze=1/32,$e=[[1.4,1.8],[.6,.8]],er=[2,1],rr=[100,50],tr=[.005,.1],nr=[.01,.08],ar=[16,32],or=Xe(120),ir=Xe(45),sr=[10,28],lr=[Xe(2.5),Xe(50)],ur=[-1/9,1/15],cr=[80,86],fr=Xe(.3),hr=Math.round(34),pr=.005,dr=[Xe(3),Xe(45)],yr=Xe(120),mr=[.01,.1],vr=200;function gr(e){return[Math.round(.5*e*e+8*e),Math.round(1/8*e*e+4*e+4)]}var br=new Audio("missile.mp3"),wr=new Audio("music.wav");wr.volume=.75,wr.loop=!0;var xr,Mr=function(){function e(e,r){this.want=e,this.current=e,this.speedLimit=r}return e.prototype.set=function(e){this.want=e},e.prototype.get=function(){return this.current},e.prototype.step=function(){this.current+=Qe(this.want-this.current,this.speedLimit)},e}(),Tr=function(){function e(e){this.velocity=o(),this.obj=new Ve(e,Me),this.flame=new Ve(e,Ae),this.flameAccent=new Ve(e,Pe),this.flameAccent.vertexTransform=this.flame.vertexTransform,this.reticle=new Ve(e,Ee),this.reticle.vertexTransform=this.obj.vertexTransform,this.lastFired=Number.NEGATIVE_INFINITY,this.throttle=new Mr(0,ur),this.worldRotation=se(),this.up=l(0,0,-1),this.forward=l(0,1,0),this.right=l(-1,0,0),this.thrusterSfx=new Audio("thruster.wav"),this.thrusterSfx.loop=!0}return e.prototype.objects=function(){return Ke(this,(function(e){switch(e.label){case 0:return[4,this.obj];case 1:return e.sent(),this.throttle.get()>0?[4,this.flame]:[3,4];case 2:return e.sent(),[4,this.flameAccent];case 3:e.sent(),e.label=4;case 4:return[2]}}))},e.prototype.setThrottle=function(e){0!=e&&this.thrusterSfx.play(),this.throttle.set(e)},e.prototype.pitchUp=function(e){this.rotate(e,this.right)},e.prototype.yawLeft=function(e){this.rotate(e,this.up)},e.prototype.rollRight=function(e){this.rotate(e,this.forward)},e.prototype.rotate=function(e,r){var t=le(se(),r,e);ue(this.worldRotation,this.worldRotation,t)},e.prototype.collisionPoints=function(){var e=this;return Se.map((function(r){return D(o(),r,e.obj.vertexTransform)}))},e.prototype.tryFire=function(e){if(!(e.play.ticks-this.lastFired<=30)){this.lastFired=e.play.ticks;var r=br.cloneNode();r.volume=.15,r.play();var t=o();x(t,this.velocity,this.forward,1);var n=new Ve(e.gl,Fe);!function(e,r,t){var n,a,o,i,s,l,u,c,f,h,p,d,y=t[0],m=t[1],v=t[2];r===e?(e[12]=r[0]*y+r[4]*m+r[8]*v+r[12],e[13]=r[1]*y+r[5]*m+r[9]*v+r[13],e[14]=r[2]*y+r[6]*m+r[10]*v+r[14],e[15]=r[3]*y+r[7]*m+r[11]*v+r[15]):(n=r[0],a=r[1],o=r[2],i=r[3],s=r[4],l=r[5],u=r[6],c=r[7],f=r[8],h=r[9],p=r[10],d=r[11],e[0]=n,e[1]=a,e[2]=o,e[3]=i,e[4]=s,e[5]=l,e[6]=u,e[7]=c,e[8]=f,e[9]=h,e[10]=p,e[11]=d,e[12]=n*y+s*m+f*v+r[12],e[13]=a*y+l*m+h*v+r[13],e[14]=o*y+u*m+p*v+r[14],e[15]=i*y+c*m+d*v+r[15])}(n.vertexTransform,n.vertexTransform,Te),re(n.vertexTransform,this.obj.vertexTransform,n.vertexTransform),e.play.missiles.push({birth:e.play.ticks,velocity:t,obj:n})}},e.prototype.eye=function(){var e=this.obj.pos();return x(e,e,this.forward,-.65),x(e,e,this.up,.3),e},e.prototype.camera=function(e){var r,t,n=this.eye(),a=this.throttle.get(),i=(r=a*a)*(t=cr)[1]+(1-r)*t[0];return j(n,e,n,.6),{eye:n,viewingTransform:ie(ee(),n,f(o(),n,this.forward),this.up),perspectiveTransform:oe(ee(),Xe(i),Nr.width/Nr.height,Ze,32)}},e}(),Sr=function(){function e(e,r,t,n){var a=$e[r],i=null!=n?Math.min(a[1],Math.max(a[0],n.radius)):Ye.apply(void 0,Ge([],ze(a),!1)),s=ze(function(e){var r,t,n=e*(2/Math.sqrt(3)),a=[[0,0,0],[n,0,0],[n,0,n],[0,0,n],[0,n,0],[n,n,0],[n,n,n],[0,n,n]].map((function(e){var r=k(o(),(n/2-0)*Math.random()+0);return[e[0]+r[0],e[1]+r[1],e[2]+r[2]]})),i=me({material:JSON.parse(JSON.stringify(Be)),vertices:a,triangles:[[0,1,2],[2,3,0],[4,5,6],[6,7,4],[0,1,4],[4,5,1],[1,2,5],[2,5,6],[2,3,6],[3,6,7],[3,0,7],[0,7,4]]}),s=0;try{for(var l=he(i.vertices),u=l.next();!u.done;u=l.next()){var c=u.value;s+=Math.hypot.apply(Math,de([],pe(c),!1))}}catch(e){r={error:e}}finally{try{u&&!u.done&&(t=l.return)&&t.call(l)}finally{if(r)throw r.error}}return[s/=i.vertices.length,i]}(i),2),l=s[0],u=s[1];if(this.obj=new Ve(e,u),this.radius=l,this.tier=r,this.health=er[r],this.velocity=t,null==n){var c=Ye.apply(void 0,Ge([],ze(tr),!1)),f=k(o());this.rotation=le(se(),f,c)}else this.rotation=n.rotation}return e.prototype.split=function(r){var t=k(o()),n=Ye.apply(void 0,Ge([],ze(nr),!1)),a=x(o(),this.velocity,t,n),i=new e(r,this.tier+1,a,{radius:this.radius/2,rotation:fe(this.rotation)}),s=this.obj.pos();i.obj.translate(s);var l=x(o(),this.velocity,t,-n),u=new e(r,this.tier+1,l,{radius:this.radius/2,rotation:fe(this.rotation)});return u.obj.translate(s),[i,u]},e.prototype.damage=function(){this.health-=1;for(var e=this.obj.model.material,r=this.health/er[this.tier],t=0;t<3;t++){var n=Le[t]*r+je[t]*(1-r);e.ambient[t]=.5*n,e.diffuse[t]=1*n}},e}();function Ar(e,r){var t=e.pos();return[0,1,2].every((function(e){return t[e]-1<=r[e]&&r[e]<=t[e]+1}))}function Pr(e){var r,t,n,a,o,i;return Ke(this,(function(s){switch(s.label){case 0:s.trys.push([0,5,6,7]),r=He(e.play.tieredAsteroids),t=r.next(),s.label=1;case 1:return t.done?[3,4]:(n=t.value,[5,He(n)]);case 2:s.sent(),s.label=3;case 3:return t=r.next(),[3,1];case 4:return[3,7];case 5:return a=s.sent(),o={error:a},[3,7];case 6:try{t&&!t.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}return[7];case 7:return[2]}}))}function Er(e){var r,t,n,a,o,i,s,l,u,c,f,h,p,d,y,m,v;return Ke(this,(function(g){switch(g.label){case 0:return[5,He(e.play.ship.objects())];case 1:if(g.sent(),!e.freecam.showShipCollisions)return[3,9];g.label=2;case 2:g.trys.push([2,7,8,9]),r=He(e.play.ship.collisionPoints()),t=r.next(),g.label=3;case 3:return t.done?[3,6]:(n=t.value,(a=new Ve(e.gl,xe)).translate(n),[4,a]);case 4:g.sent(),g.label=5;case 5:return t=r.next(),[3,3];case 6:return[3,9];case 7:return o=g.sent(),h={error:o},[3,9];case 8:try{t&&!t.done&&(p=r.return)&&p.call(r)}finally{if(h)throw h.error}return[7];case 9:g.trys.push([9,14,15,16]),i=He(e.play.missiles),s=i.next(),g.label=10;case 10:return s.done?[3,13]:[4,s.value.obj];case 11:g.sent(),g.label=12;case 12:return s=i.next(),[3,10];case 13:return[3,16];case 14:return l=g.sent(),d={error:l},[3,16];case 15:try{s&&!s.done&&(y=i.return)&&y.call(i)}finally{if(d)throw d.error}return[7];case 16:g.trys.push([16,21,22,23]),u=He(Pr(e)),c=u.next(),g.label=17;case 17:return c.done?[3,20]:[4,c.value.obj];case 18:g.sent(),g.label=19;case 19:return c=u.next(),[3,17];case 20:return[3,23];case 21:return f=g.sent(),m={error:f},[3,23];case 22:try{c&&!c.done&&(v=u.return)&&v.call(u)}finally{if(m)throw m.error}return[7];case 23:return[5,He(e.play.suns)];case 24:return g.sent(),[2]}}))}function Fr(e){return Ke(this,(function(r){switch(r.label){case 0:return[4,e.play.ship.reticle];case 1:return r.sent(),[2]}}))}function Lr(e){var r,t,n,a,o;return Ke(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,7]),r=He(e.play.suns),t=r.next(),i.label=1;case 1:return t.done?[3,4]:[4,t.value.pos()];case 2:i.sent(),i.label=3;case 3:return t=r.next(),[3,1];case 4:return[3,7];case 5:return n=i.sent(),a={error:n},[3,7];case 6:try{t&&!t.done&&(o=r.return)&&o.call(r)}finally{if(a)throw a.error}return[7];case 7:return[2]}}))}function jr(e){e.mode==xr.Menu?requestAnimationFrame((function(){return function(e){var r,t;(function(e){var r,t,n=[];try{for(var a=He(e.menu.asteroids.entries()),o=a.next();!o.done;o=a.next()){var i=ze(o.value,2),s=i[0],l=i[1];M(e.menu.camera.eye,l.obj.pos())>34&&n.push(s)}}catch(e){r={error:e}}finally{try{o&&!o.done&&(t=a.return)&&t.call(a)}finally{if(r)throw r.error}}for(var u=n.length-1;u>=0;u--)e.menu.asteroids.splice(n[u],1)})(e),function(e){for(var r=e.menu.camera;e.menu.asteroids.length<64;){var t=We(r.forward,yr),n=Je(w(o(),t,-1),dr);x(t,r.eye,t,33),w(n,n,Ye.apply(void 0,Ge([],ze(mr),!1)));var a=new Sr(e.gl,1,n);a.velocity=n,a.obj.translate(t),e.menu.asteroids.push(a)}}(e);try{for(var n=He(e.menu.asteroids),a=n.next();!a.done;a=n.next()){var i=a.value;i.obj.translate(i.velocity);var s=ae(ee(),i.rotation);re(i.obj.vertexTransform,i.obj.vertexTransform,s)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=n.return)&&t.call(n)}finally{if(r)throw r.error}}e.inputs.keyboard.pressed.has("KeyB")&&e.menu.moveModeDebouncer.try((function(){e.menu.movingCamera?(document.exitPointerLock(),e.menu.movingCamera=!1):(Nr.requestPointerLock(),e.menu.movingCamera=!0)})),e.menu.movingCamera&&Or(e.inputs.keyboard,e.menu.camera),Oe(e.gl,function(e){var r,t,n,a,o;return Ke(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,7]),r=He(e.menu.suns),t=r.next(),i.label=1;case 1:return t.done?[3,4]:[4,t.value.pos()];case 2:i.sent(),i.label=3;case 3:return t=r.next(),[3,1];case 4:return[3,7];case 5:return n=i.sent(),a={error:n},[3,7];case 6:try{t&&!t.done&&(o=r.return)&&o.call(r)}finally{if(a)throw a.error}return[7];case 7:return[2]}}))}(e),function(e){var r,t,n,a,o;return Ke(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,7]),r=He(e.menu.asteroids),t=r.next(),i.label=1;case 1:return t.done?[3,4]:[4,t.value.obj];case 2:i.sent(),i.label=3;case 3:return t=r.next(),[3,1];case 4:return[3,7];case 5:return n=i.sent(),a={error:n},[3,7];case 6:try{t&&!t.done&&(o=r.return)&&o.call(r)}finally{if(a)throw a.error}return[7];case 7:return[5,He(e.menu.suns)];case 8:return i.sent(),[2]}}))}(e),[],e.shaderInfo,e.menu.camera),jr(e)}(e)})):e.mode==xr.Pause?requestAnimationFrame((function(){return function(e){e.inputs.keyboard.pressed.has("KeyP")&&e.inputs.pauseDebouncer.try((function(){return Dr(e)})),Oe(e.gl,Lr(e),Er(e),Fr(e),e.shaderInfo,e.play.camera),jr(e)}(e)})):e.mode==xr.Play?requestAnimationFrame((function(){return function(e){(function(e){if(null!=e.play.levelFinishedAt){if(e.play.ticks-e.play.levelFinishedAt<30)return;_r(e,e.play.level+1)}e.play.numAsteroids.every((function(e){return 0==e}))&&(e.play.levelFinishedAt=e.play.ticks)})(e),function(e){var r=e.inputs.keyboard;e.inputs.mouseDown&&e.play.ship.tryFire(e),r.pressed.has("KeyP")&&e.inputs.pauseDebouncer.try((function(){return kr(e)})),r.pressed.has("KeyE")&&e.play.ship.rollRight(fr),r.pressed.has("KeyQ")&&e.play.ship.rollRight(-fr),r.pressed.has("KeyW")?e.play.ship.setThrottle(1):e.play.ship.setThrottle(0),r.pressed.has("Space")&&e.play.ship.tryFire(e)}(e),function(e){var r=navigator.getGamepads()[e.inputs.gamepad];if(null!=r){e.play.ship.pitchUp(.003*r.axes[1]),e.play.ship.yawLeft(-.003*r.axes[0]),e.play.ship.rollRight(.003*r.axes[2]),e.play.ship.setThrottle(r.buttons[7].value),(r.buttons[5].pressed||r.buttons[0].pressed)&&e.play.ship.tryFire(e),console.log(r)}}(e),function(e){var r,t,n=[];try{for(var a=He(e.play.suns.entries()),o=a.next();!o.done;o=a.next()){var i=ze(o.value,2),s=i[0],l=i[1];M(e.play.ship.obj.pos(),l.pos())>34&&n.push(s)}}catch(e){r={error:e}}finally{try{o&&!o.done&&(t=a.return)&&t.call(a)}finally{if(r)throw r.error}}for(var u=n.length-1;u>=0;u--)e.play.suns.splice(n[u],1)}(e),function(e){var r,t,n,a,o,i,s=[[],[]];try{for(var l=He(e.play.tieredAsteroids.entries()),u=l.next();!u.done;u=l.next()){var c=ze(u.value,2),f=c[0],h=c[1];try{for(var p=(n=void 0,He(h.entries())),d=p.next();!d.done;d=p.next()){var y=ze(d.value,2),m=y[0],v=y[1];M(e.play.ship.obj.pos(),v.obj.pos())>34&&s[f].push(m)}}catch(e){n={error:e}}finally{try{d&&!d.done&&(a=p.return)&&a.call(p)}finally{if(n)throw n.error}}}}catch(e){r={error:e}}finally{try{u&&!u.done&&(t=l.return)&&t.call(l)}finally{if(r)throw r.error}}try{for(var g=He(s.entries()),b=g.next();!b.done;b=g.next())for(var w=ze(b.value,2),x=(f=w[0],w[1]),T=x.length-1;T>=0;T--)e.play.tieredAsteroids[f].splice(x[T],1)}catch(e){o={error:e}}finally{try{b&&!b.done&&(i=g.return)&&i.call(g)}finally{if(o)throw o.error}}}(e),function(e){for(;e.play.missiles.length>0&&e.play.ticks-e.play.missiles[0].birth>hr;)e.play.missiles.shift()}(e),function(e){for(;e.play.suns.length<4;){var r=new Ve(e.gl,we),t=void 0;x(t=s(e.play.ship.velocity)<1e-10?k(o()):Je(E(o(),e.play.ship.velocity),lr),e.play.ship.obj.pos(),t,33),r.translate(t),e.play.suns.push(r)}}(e),function(e){for(var r=0;r<2;r++)for(;e.play.tieredAsteroids[r].length<e.play.numAsteroids[r];){var t=We(e.play.ship.forward,or),n=We(w(o(),e.play.ship.forward,-1),ir);x(t,e.play.ship.obj.pos(),t,33),w(n,n,Ye.apply(void 0,Ge([],ze(e.play.asteroidSpeed),!1)));var a=new Sr(e.gl,r,n);a.velocity=n,a.obj.translate(t),e.play.tieredAsteroids[r].push(a)}}(e),function(e){var r,t,n,a,o=[];try{for(var i=He(e.play.suns),s=i.next();!s.done;s=i.next()){var l=s.value;try{for(var u=(n=void 0,He(e.play.missiles.entries())),c=u.next();!c.done;c=u.next()){var f=ze(c.value,2),h=f[0];Ar(l,f[1].obj.pos())&&o.push(h)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=u.return)&&a.call(u)}finally{if(n)throw n.error}}}}catch(e){r={error:e}}finally{try{s&&!s.done&&(t=i.return)&&t.call(i)}finally{if(r)throw r.error}}for(var p=o.length-1;p>=0;p--)e.play.missiles.splice(o[p],1)}(e),function(e){var r,t,n,a,i=[];try{for(var l=He(Pr(e)),u=l.next();!u.done;u=l.next()){var c=u.value;try{for(var f=(n=void 0,He(e.play.missiles.entries())),p=f.next();!p.done;p=f.next()){var d=ze(p.value,2),y=d[0],m=d[1];if(M(c.obj.pos(),m.obj.pos())<=c.radius){i.push(y),c.damage();var v=4/3*Math.PI*Math.pow(c.radius,3)*1,g=.4*v*Math.pow(c.radius,2),b=h(o(),m.obj.pos(),c.obj.pos()),w=s(b);E(b,b);var T=Math.abs(F(b,m.velocity)),S=x(o(),m.velocity,b,-T);x(c.velocity,c.velocity,b,.3/v*-T);var A=L(o(),b,S);E(A,A);var P=w*s(S)*.3,j=le(se(),A,P/g);ue(c.rotation,c.rotation,j)}}}catch(e){n={error:e}}finally{try{p&&!p.done&&(a=f.return)&&a.call(f)}finally{if(n)throw n.error}}}}catch(e){r={error:e}}finally{try{u&&!u.done&&(t=l.return)&&t.call(l)}finally{if(r)throw r.error}}for(var B=i.length-1;B>=0;B--)e.play.missiles.splice(i[B],1)}(e),function(e){for(var r,t=0;t<2;t++)for(var n=e.play.tieredAsteroids[t].length-1;n>=0;n--){var a=e.play.tieredAsteroids[t][n];if(a.health<=0){if(t+1<2){var o=a.split(e.gl);(r=e.play.tieredAsteroids[t+1]).push.apply(r,Ge([],ze(o),!1)),e.play.numAsteroids[t+1]+=o.length}e.play.tieredAsteroids[t].splice(n,1),e.play.numAsteroids[t]-=1,e.play.score+=rr[t],Ir(e)}}}(e),function(e){x(e.play.ship.velocity,e.play.ship.velocity,e.play.ship.forward,.001*e.play.ship.throttle.get())}(e),function(e){e.play.ship.obj.translate(e.play.ship.velocity)}(e),function(e){var r,t;try{for(var n=He(e.play.missiles),a=n.next();!a.done;a=n.next()){var o=a.value;o.obj.translate(o.velocity)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=n.return)&&t.call(n)}finally{if(r)throw r.error}}}(e),function(e){var r,t;try{for(var n=He(Pr(e)),a=n.next();!a.done;a=n.next()){var i=a.value;i.obj.translate(i.velocity);var s=i.obj.pos();i.obj.translate(w(o(),s,-1));var l=ae(ee(),i.rotation);re(i.obj.vertexTransform,l,i.obj.vertexTransform),i.obj.translate(s)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=n.return)&&t.call(n)}finally{if(r)throw r.error}}}(e),null==e.play.levelFinishedAt&&(function(e){var r,t,n,a;try{for(var o=He(Pr(e)),i=o.next();!i.done;i=o.next()){var s=i.value;try{for(var l=(n=void 0,He(e.play.ship.collisionPoints())),u=l.next();!u.done;u=l.next()){var c=u.value;M(s.obj.pos(),c)<=.85*s.radius&&Rr(e)}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}}}catch(e){r={error:e}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(r)throw r.error}}}(e),function(e){var r,t,n,a;try{for(var o=He(e.play.suns),i=o.next();!i.done;i=o.next()){var s=i.value;try{for(var l=(n=void 0,He(e.play.ship.collisionPoints())),u=l.next();!u.done;u=l.next())Ar(s,u.value)&&Rr(e)}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}}}catch(e){r={error:e}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(r)throw r.error}}}(e)),Ur(e),function(e){e.play.camera=e.play.ship.camera(e.play.lastCameraPosition),e.play.lastCameraPosition=e.play.ship.eye()}(e),function(e){var r=e.play.ship;r.throttle.step();var t=r.throttle.get();!function(e,r,t){var n=t[0],a=t[1],o=t[2];e[0]=r[0]*n,e[1]=r[1]*n,e[2]=r[2]*n,e[3]=r[3]*n,e[4]=r[4]*a,e[5]=r[5]*a,e[6]=r[6]*a,e[7]=r[7]*a,e[8]=r[8]*o,e[9]=r[9]*o,e[10]=r[10]*o,e[11]=r[11]*o,e[12]=r[12],e[13]=r[13],e[14]=r[14],e[15]=r[15]}(r.flame.vertexTransform,r.obj.vertexTransform,l(1,t,1));var n=.006*Math.sin(.707106781187*e.play.ticks),a=.004*Math.sin(.809015*e.play.ticks);te(r.flame.vertexTransform,r.flame.vertexTransform,n,l(1,0,0)),te(r.flame.vertexTransform,r.flame.vertexTransform,a,l(0,0,1)),r.thrusterSfx.volume=1*t}(e),function(e){var r,n,a,i,s=e.play.ship,l=(r=o(),n=s.worldRotation,a=2*Math.acos(n[3]),(i=Math.sin(a/2))>t?(r[0]=n[0]/i,r[1]=n[1]/i,r[2]=n[2]/i):(r[0]=1,r[1]=0,r[2]=0),a),u=(Math.log(l)-Math.log(1e-10))/(Math.log(.01)-Math.log(1e-10)),c=.925*(u=Qe(u,[0,1]));(function(e,r,t){e[0]=r[0]*t,e[1]=r[1]*t,e[2]=r[2]*t,e[3]=r[3]*t})(s.worldRotation,s.worldRotation,c),function(e,r){var t=r[0],n=r[1],a=r[2];e[0]=t,e[1]=n,e[2]=a,e[3]=Math.sqrt(Math.abs(1-t*t-n*n-a*a))}(s.worldRotation,s.worldRotation),V(s.forward,s.forward,s.worldRotation),V(s.up,s.up,s.worldRotation),V(s.right,s.right,s.worldRotation);var f=s.obj.pos();s.obj.translate(w(o(),f,-1));var h=ae(ee(),s.worldRotation);re(s.obj.vertexTransform,h,s.obj.vertexTransform),s.obj.translate(f)}(e),e.inputs.keyboard.pressed.has("KeyB")&&e.freecam.freecamModeDebouncer.try((function(){return function(e){e.freecam.camera.sync(e.play.ship,e.play.camera),e.mode=xr.Freecam}(e)})),e.play.ticks+=1,Oe(e.gl,Lr(e),Er(e),Fr(e),e.shaderInfo,e.play.camera),jr(e)}(e)})):e.mode==xr.Freecam&&requestAnimationFrame((function(){return function(e){var r=e.inputs.keyboard;Or(r,e.freecam.camera),r.pressed.has("ArrowLeft")&&e.freecam.generalDebouncer.try((function(){e.play.level=Math.max(1,e.play.level-1),e.play.numAsteroids=gr(e.play.level),Cr(e)})),r.pressed.has("ArrowRight")&&e.freecam.generalDebouncer.try((function(){e.play.level+=1,e.play.numAsteroids=gr(e.play.level),Cr(e)})),r.pressed.has("KeyF")&&e.freecam.generalDebouncer.try((function(){e.freecam.fog=!e.freecam.fog})),r.pressed.has("KeyC")&&e.freecam.generalDebouncer.try((function(){e.freecam.showShipCollisions=!e.freecam.showShipCollisions})),r.pressed.has("KeyB")&&e.freecam.freecamModeDebouncer.try((function(){return function(e){e.mode=xr.Play}(e)})),Oe(e.gl,Lr(e),Er(e),Fr(e),e.shaderInfo,e.freecam.camera,{fog:e.freecam.fog}),jr(e)}(e)}))}function Br(e){qr.time.hidden=!0,qr.score.hidden=!0,qr.level.hidden=!0,qr.mainText.innerHTML="Asteroids",qr.mainText.hidden=!1,qr.menuButton.innerHTML="Start",qr.menuButton.hidden=!1,qr.menuButton.onclick=function(){_r(e,1)},qr.menuButton2.hidden=!0,e.mode=xr.Menu}function Rr(e){qr.time.hidden=!1,qr.score.hidden=!1,qr.level.hidden=!1,qr.mainText.innerHTML="Game Over",qr.mainText.hidden=!1,qr.menuButton.innerHTML="Restart",qr.menuButton.hidden=!1,qr.menuButton.onclick=function(){_r(e,1)},qr.menuButton2.innerHTML="Quit",qr.menuButton2.hidden=!1,qr.menuButton2.onclick=function(){Br(e)},e.play.ship.thrusterSfx.pause(),document.exitPointerLock(),e.mode=xr.Pause}function kr(e){qr.score.hidden=!1,qr.time.hidden=!1,qr.level.hidden=!1,qr.mainText.innerHTML="Pause",qr.mainText.hidden=!1,qr.menuButton.innerHTML="Unpause",qr.menuButton.hidden=!1,qr.menuButton.onclick=function(){Dr(e)},qr.menuButton2.innerHTML="Quit",qr.menuButton2.hidden=!1,qr.menuButton2.onclick=function(){Br(e)},wr.pause(),e.play.ship.thrusterSfx.pause(),document.exitPointerLock(),e.mode=xr.Pause}function Dr(e){qr.time.hidden=!1,qr.score.hidden=!1,qr.level.hidden=!1,qr.mainText.hidden=!0,qr.menuButton.hidden=!0,qr.menuButton2.hidden=!0,wr.play(),Nr.requestPointerLock(),e.mode=xr.Play}function _r(e,r){var t,n;qr.time.hidden=!1,qr.score.hidden=!1,qr.level.hidden=!1,qr.mainText.hidden=!0,qr.menuButton.hidden=!0,qr.menuButton2.hidden=!0,1==r&&(wr.play(),wr.currentTime=0),Nr.requestPointerLock(),e.mode=xr.Play,e.play.ship=new Tr(e.gl),e.play.missiles=[],e.play.tieredAsteroids=[[],[]],e.play.numAsteroids=gr(r),e.play.asteroidSpeed=function(e){return[.01+.005*e,.09+.03*e]}(r),e.play.suns=[],e.play.score=0,e.play.ticks=0,e.play.lastCameraPosition=e.play.ship.eye(),e.play.camera=e.play.ship.camera(e.play.ship.eye()),e.play.level=r,e.play.levelFinishedAt=null,Ir(e),Ur(e),Cr(e);try{for(var a=He(e.play.numAsteroids.entries()),i=a.next();!i.done;i=a.next())for(var s=ze(i.value,2),l=s[0],u=s[1],c=0;c<u;c++){var f=We(e.play.ship.forward,or),h=We(w(o(),f,-1),ir);w(f,f,Ye.apply(void 0,Ge([],ze(ar),!1))),w(h,h,Ye.apply(void 0,Ge([],ze(e.play.asteroidSpeed),!1)));var p=new Sr(e.gl,l,h);p.velocity=h,p.obj.translate(f),e.play.tieredAsteroids[l].push(p)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}for(c=0;c<4;c++){var d=new Ve(e.gl,we);d.translate(k(o(),Ye.apply(void 0,Ge([],ze(sr),!1)))),e.play.suns.push(d)}}!function(e){e[e.Menu=0]="Menu",e[e.Pause=1]="Pause",e[e.Play=2]="Play",e[e.Freecam=3]="Freecam"}(xr||(xr={}));var Vr=function(){function e(e){var r=e.eye,t=e.lookAt,n=e.lookUp,a=e.width,i=e.height,s=e.fovDegrees,l=e.near,u=e.far,c=e.moveSpeed;this.eye=r,this.forward=t,this.up=n,this.right=L(o(),t,n),this.moveSpeed=c,this.viewingTransform=ee(),this.perspectiveTransform=ee(),this.refreshView(),oe(this.perspectiveTransform,Xe(s),a/i,l,u)}return e.prototype.refreshView=function(){ie(this.viewingTransform,this.eye,f(o(),this.eye,this.forward),this.up)},e.prototype.move=function(e,r){x(this.eye,this.eye,e,r),this.refreshView()},e.prototype.pitchUp=function(e){this.transformView(ne(ee(),e,this.right)),this.refreshView()},e.prototype.yawLeft=function(e){this.transformView(ne(ee(),e,this.up)),this.refreshView()},e.prototype.rollRight=function(e){this.transformView(ne(ee(),e,this.forward)),this.refreshView()},e.prototype.transformView=function(e){D(this.forward,this.forward,e),D(this.up,this.up,e),D(this.right,this.right,e)},e.prototype.sync=function(e,r){u(this.forward,e.forward),u(this.up,e.up),u(this.right,e.right),u(this.eye,r.eye),function(e,r){e[0]=r[0],e[1]=r[1],e[2]=r[2],e[3]=r[3],e[4]=r[4],e[5]=r[5],e[6]=r[6],e[7]=r[7],e[8]=r[8],e[9]=r[9],e[10]=r[10],e[11]=r[11],e[12]=r[12],e[13]=r[13],e[14]=r[14],e[15]=r[15]}(this.viewingTransform,r.viewingTransform)},e}();function Ir(e){qr.score.innerText="Score: ".concat(e.play.score)}function Ur(e){var r=Math.floor(e.play.ticks/60),t=Math.floor(r/60),n=r%60;qr.time.innerText="Time: ".concat(t,":").concat(n.toString().padStart(2,"0"))}function Cr(e){qr.level.innerText="Level: ".concat(e.play.level)}function Or(e,r){var t=o();e.pressed.has("KeyA")&&x(t,t,r.right,-1),e.pressed.has("KeyD")&&f(t,t,r.right),e.pressed.has("KeyW")&&f(t,t,r.forward),e.pressed.has("KeyS")&&x(t,t,r.forward,-1),e.pressed.has("ShiftLeft")&&x(t,t,r.up,-1),e.pressed.has("Space")&&f(t,t,r.up),K(t,o())||(E(t,t),r.move(t,r.moveSpeed)),e.pressed.has("KeyE")&&r.rollRight(.02),e.pressed.has("KeyQ")&&r.rollRight(-.02),e.pressed.has("ArrowUp")&&(r.moveSpeed+=pr),e.pressed.has("ArrowDown")&&r.moveSpeed>pr&&(r.moveSpeed-=pr)}var Nr=document.getElementById("game-canvas"),qr={score:document.getElementById("score-text"),time:document.getElementById("time-text"),level:document.getElementById("level-text"),menuButton:document.getElementById("menu-button"),menuButton2:document.getElementById("menu-button2"),mainText:document.getElementById("main-text")};!function(){var e=function(e){var r=e.getContext("webgl");if(null==r)throw"unable to create gl context -- is your browser gl ready?";return r.clearDepth(1),r.clearColor.apply(r,ke(ke([],Re(be),!1),[1],!1)),r.enable(r.DEPTH_TEST),r}(Nr),r=function(e){var r=new qe;r.register();var t=new Tr(e),n={gl:e,shaderInfo:Ce(e),mode:xr.Menu,inputs:{keyboard:r,gamepad:0,pauseDebouncer:new Ne(Date.now,vr),mouseDown:!1},play:{ship:t,missiles:[],tieredAsteroids:[[],[]],numAsteroids:[0,0],suns:[],ticks:0,score:0,lastCameraPosition:t.eye(),camera:t.camera(t.eye()),asteroidSpeed:[0,0],level:0,levelFinishedAt:null},freecam:{camera:new Vr({eye:l(0,0,-5),lookAt:l(0,0,1),lookUp:l(0,1,0),width:Nr.width,height:Nr.height,fovDegrees:cr[0],near:.03125,far:64,moveSpeed:.04}),freecamModeDebouncer:new Ne(Date.now,vr),generalDebouncer:new Ne(Date.now,vr),fog:!0,showShipCollisions:!1},menu:{camera:new Vr({eye:l(0,0,0),lookAt:l(0,0,1),lookUp:l(0,1,0),width:Nr.width,height:Nr.height,fovDegrees:cr[0],near:Ze,far:32,moveSpeed:.04}),asteroids:[],suns:[],movingCamera:!1,moveModeDebouncer:new Ne(Date.now,vr)}};return function(e){var r=e.menu.camera;r.yawLeft(Xe(-30)),r.pitchUp(Xe(-20));var t=new Ve(e.gl,we);t.translate(l(3.5,-4,10)),e.menu.suns.push(t);var n=new Ve(e.gl,we);n.translate(x(o(),r.eye,r.forward,-4)),e.menu.suns.push(n)}(n),n}(e);function t(e){r.mode==xr.Freecam?(r.freecam.camera.yawLeft(-.002*e.movementX),r.freecam.camera.pitchUp(-.002*e.movementY)):r.mode==xr.Play?(r.play.ship.yawLeft(-1e-4*e.movementX),r.play.ship.pitchUp(-1e-4*e.movementY)):r.mode==xr.Menu&&(r.menu.camera.yawLeft(-.002*e.movementX),r.menu.camera.pitchUp(-.002*e.movementY))}window.addEventListener("blur",(function(){r.mode==xr.Play&&kr(r),wr.pause()})),qr.menuButton.onclick=function(){_r(r,1)},Nr.onclick=function(){r.mode!=xr.Play&&r.mode!=xr.Freecam||Nr.requestPointerLock()},document.addEventListener("pointerlockchange",(function(){document.pointerLockElement===Nr?document.addEventListener("mousemove",t):document.removeEventListener("mousemove",t)})),document.addEventListener("mousedown",(function(){r.inputs.mouseDown=!0})),document.addEventListener("mouseup",(function(){r.inputs.mouseDown=!1})),jr(r)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,